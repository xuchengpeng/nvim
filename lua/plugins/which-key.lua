return {
  "folke/which-key.nvim",
  lazy = true,
  event = "VeryLazy",
  config = function()
    local which_key = require("which-key")
    which_key.setup({
      icons = {
        mappings = false,
      },
    })
    which_key.add({
      { "<leader>b", group = "Buffer" },
      { "<leader>bc", "<cmd>BufferLinePickClose<cr>", desc = "Close Buffer" },
      { "<leader>bn", "<cmd>BufferLineCycleNext<cr>", desc = "Next Buffer" },
      { "<leader>bp", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev Buffer" },
      { "<leader>bs", "<cmd>BufferLinePick<cr>", desc = "Switch Buffer" },
      { "<leader>c", group = "Coding" },
      { "<leader>cj", "<cmd>TSJJoin<cr>", desc = "Join" },
      { "<leader>co", "<cmd>AerialToggle<cr>", desc = "Outline" },
      { "<leader>cs", "<cmd>TSJSplit<cr>", desc = "Split" },
      { "<leader>cx", group = "Trouble" },
      { "<leader>cxT", "<cmd>TodoTelescope<cr>", desc = "Todo" },
      { "<leader>cxt", "<cmd>TodoTrouble<cr>", desc = "Todo (Trouble)" },
      { "<leader>cxx", "<cmd>Trouble<cr>", desc = "Trouble" },
      { "<leader>d", group = "Debug" },
      { "<leader>db", "<cmd>lua require('dap').toggle_breakpoint()<cr>", desc = "Toggle Breakpoint" },
      { "<leader>dc", "<cmd>lua require('dap').continue()<cr>", desc = "Continue" },
      { "<leader>dd", "<cmd>lua require('osv').run_this()<cr>", desc = "Launch Lua Debugger" },
      { "<leader>di", "<cmd>lua require('dap').step_into()<cr>", desc = "Step Into" },
      { "<leader>do", "<cmd>lua require('dap').step_over()<cr>", desc = "Step Over" },
      { "<leader>dr", "<cmd>lua require('dap').repl.open()<cr>", desc = "Repl" },
      { "<leader>ds", "<cmd>lua require('osv').launch({ port = 8086 })<cr>", desc = "Launch Lua Debugger Server" },
      { "<leader>du", "<cmd>lua require('dapui').toggle()<cr>", desc = "Dap UI" },
      { "<leader>dw", "<cmd>lua require('dap.ui.widgets').hover()<cr>", desc = "Widgets" },
      { "<leader>f", group = "Telescope" },
      { "<leader>fb", "<cmd>Telescope file_browser<cr>", desc = "File Browser" },
      { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find Files" },
      { "<leader>fg", "<cmd>Telescope live_grep<cr>", desc = "Live Grep" },
      { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help Tags" },
      { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recents Files" },
      { "<leader>fs", "<cmd>Telescope buffers<cr>", desc = "Switch Buffers" },
      { "<leader>ft", "<cmd>Telescope<cr>", desc = "Telescope" },
      { "<leader>g", group = "Git" },
      { "<leader>gP", "<cmd>Gitsigns preview_hunk<cr>", desc = "Preview Hunk" },
      { "<leader>gR", "<cmd>Gitsigns reset_buffer<cr>", desc = "Reset Buffer" },
      { "<leader>gS", "<cmd>Gitsigns stage_buffer<cr>", desc = "Stage Buffer" },
      { "<leader>gb", "<cmd>Gitsigns blame_line<cr>", desc = "Blame Line" },
      { "<leader>gd", "<cmd>Gitsigns diffthis<cr>", desc = "Diff This" },
      { "<leader>gg", "<cmd>Gitsigns<cr>", desc = "Gitsigns" },
      { "<leader>gn", "<cmd>Gitsigns next_hunk<cr>", desc = "Next Hunk" },
      { "<leader>gp", "<cmd>Gitsigns prev_hunk<cr>", desc = "Prev Hunk" },
      { "<leader>gr", "<cmd>Gitsigns reset_hunk<cr>", desc = "Reset Hunk" },
      { "<leader>gs", "<cmd>Gitsigns stage_hunk<cr>", desc = "Stage Hunk" },
      { "<leader>gu", "<cmd>Gitsigns undo_stage_hunk<cr>", desc = "Undo Stage Hunk" },
      { "<leader>l", group = "LSP" },
      { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
      { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols" },
      { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
      { "<leader>ld", "<cmd>Telescope lsp_definitions<cr>", desc = "Goto Definition" },
      {
        "<leader>lf",
        function()
          require("conform").format({ async = true, lsp_format = "fallback" })
        end,
        desc = "Format",
      },
      { "<leader>li", "<cmd>Telescope lsp_implementations<cr>", desc = "Goto Implementation" },
      { "<leader>ln", "<cmd>lua vim.diagnostic.goto_next()<cr>", desc = "Next Diagnostic" },
      { "<leader>lp", "<cmd>lua vim.diagnostic.goto_prev()<cr>", desc = "Prev Diagnostic" },
      { "<leader>lr", "<cmd>Telescope lsp_references<cr>", desc = "References" },
      { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
      { "<leader>lt", "<cmd>Telescope lsp_type_definitions<cr>", desc = "Goto Type Definition" },
      { "<leader>o", group = "Open" },
      { "<leader>oe", "<cmd>NvimTreeOpen<cr>", desc = "Explorer" },
      { "<leader>ot", "<cmd>ToggleTerm<cr>", desc = "Terminal" },
      { "<leader>p", group = "Plugins" },
      { "<leader>ph", "<cmd>Lazy home<cr>", desc = "Home" },
      { "<leader>pi", "<cmd>Lazy install<cr>", desc = "Install" },
      { "<leader>pl", "<cmd>Lazy log<cr>", desc = "Log" },
      { "<leader>pp", "<cmd>Lazy profile<cr>", desc = "Profile" },
      { "<leader>ps", "<cmd>Lazy sync<cr>", desc = "Install,Clean,Update" },
      { "<leader>pu", "<cmd>Lazy update<cr>", desc = "Update" },
      { "<leader>px", "<cmd>Lazy clean<cr>", desc = "Clean" },
      { "<leader>q", "<cmd>confirm quit<cr>", desc = "Quit" },
      { "<leader>z", "<cmd>ZenMode<cr>", desc = "Zen Mode" },
    })
  end,
}
